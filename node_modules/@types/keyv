{
    "name": "@types/keyv",
    "version": "3.1.1",
    "description": "TypeScript definitions for keyv",
    "license": "MIT",
    "contributors": [
        {
            "name": "AryloYeung",
            "url": "https://github.com/Arylo",
            "githubUsername": "Arylo"
        },
        {
            "name": "BendingBender",
            "url": "https://github.com/BendingBender",
            "githubUsername": "BendingBender"
        }
    ],
    "main": "",
    "types": "index.d.ts",
    "repository": {
        "type": "git",
        "url": "https://github.com/DefinitelyTyped/DefinitelyTyped.git",
        "directory": "types/keyv"
    },
    "scripts": {},
    "dependencies": {
        "@types/node": "*"
    },
    "typesPublisherContentHash": "883f9e92997b7991324e37284aa16e71d6f43731110ec0e7f62ccca68960aec3",
    "typeScriptVersion": "2.8"
}
# Installation
> `npm install --save @types/keyv`

# Summary
This package contains type definitions for keyv (https://github.com/lukechilds/keyv).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/keyv.

### Additional Details
 * Last updated: Mon, 23 Dec 2019 16:40:54 GMT
 * Dependencies: [@types/node](https://npmjs.com/package/@types/node)
 * Global values: none

# Credits
These definitions were written by AryloYeung (https://github.com/Arylo), and BendingBender (https://github.com/BendingBender).

// Type definitions for keyv 3.1
// Project: https://github.com/lukechilds/keyv
// Definitions by: AryloYeung <https://github.com/Arylo>
//                 BendingBender <https://github.com/BendingBender>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

/// <reference types="node" />
import { EventEmitter } from 'events';

declare class Keyv<TValue = any> extends EventEmitter {
    /**
     * @param opts The options object is also passed through to the storage adapter. Check your storage adapter docs for any extra options.
     */
    constructor(opts?: Keyv.Options<TValue>);
    /**
     * @param uri The connection string URI.
     *
     * Merged into the options object as options.uri.
     * @param opts The options object is also passed through to the storage adapter. Check your storage adapter docs for any extra options.
     */
    constructor(uri?: string, opts?: Keyv.Options<TValue>);

    /** Returns the value. */
    get(key: string): Promise<TValue | undefined>;
    /**
     * Set a value.
     *
     * By default keys are persistent. You can set an expiry TTL in milliseconds.
     */
    set(key: string, value: TValue, ttl?: number): Promise<true>;
    /**
     * Deletes an entry.
     *
     * Returns `true` if the key existed, `false` if not.
     */
    delete(key: string): Promise<boolean>;
    /** Delete all entries in the current namespace. */
    clear(): Promise<void>;
}

declare namespace Keyv {
    interface Options<TValue> {
        /** Namespace for the current instance. */
        namespace?: string;
        /** A custom serialization function. */
        serialize?: (data: TValue) => string;
        /** A custom deserialization function. */
        deserialize?: (data: string) => TValue;
        /** The connection string URI. */
        uri?: string;
        /** The storage adapter instance to be used by Keyv. */
        store?: Store<TValue>;
        /** Default TTL. Can be overridden by specififying a TTL on `.set()`. */
        ttl?: number;
        /** Specify an adapter to use. e.g `'redis'` or `'mongodb'`. */
        adapter?: 'redis' | 'mongodb' | 'mongo' | 'sqlite' | 'postgresql' | 'postgres' | 'mysql';

        [key: string]: any;
    }

    interface Store<TValue> {
        get(key: string): TValue | Promise<TValue | undefined> | undefined;
        set(key: string, value: TValue, ttl?: number): any;
        delete(key: string): boolean | Promise<boolean>;
        clear(): void | Promise<void>;
    }
}

export = Keyv;

    MIT License

    Copyright (c) Microsoft Corporation. All rights reserved.

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE
