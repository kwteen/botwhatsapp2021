    MIT License

    Copyright (c) Microsoft Corporation. All rights reserved.

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE

{
    "name": "@types/debug",
    "version": "4.1.5",
    "description": "TypeScript definitions for debug",
    "license": "MIT",
    "contributors": [
        {
            "name": "Seon-Wook Park",
            "url": "https://github.com/swook",
            "githubUsername": "swook"
        },
        {
            "name": "Gal Talmor",
            "url": "https://github.com/galtalmor",
            "githubUsername": "galtalmor"
        },
        {
            "name": "John McLaughlin",
            "url": "https://github.com/zamb3zi",
            "githubUsername": "zamb3zi"
        },
        {
            "name": "Brasten Sager",
            "url": "https://github.com/brasten",
            "githubUsername": "brasten"
        },
        {
            "name": "Nicolas Penin",
            "url": "https://github.com/npenin",
            "githubUsername": "npenin"
        },
        {
            "name": "Kristian Brünn",
            "url": "https://github.com/kristianmitk",
            "githubUsername": "kristianmitk"
        }
    ],
    "main": "",
    "types": "index",
    "repository": {
        "type": "git",
        "url": "https://github.com/DefinitelyTyped/DefinitelyTyped.git",
        "directory": "types/debug"
    },
    "scripts": {},
    "dependencies": {},
    "typesPublisherContentHash": "c45deaee8b444b3ae0df891511582b5067c8c689a7d9b4cabe984bacad67e4ab",
    "typeScriptVersion": "2.0"
}
# Installation
> `npm install --save @types/debug`

# Summary
This package contains type definitions for debug (https://github.com/visionmedia/debug).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/debug

Additional Details
 * Last updated: Thu, 08 Aug 2019 15:58:41 GMT
 * Dependencies: none
 * Global values: debug

# Credits
These definitions were written by Seon-Wook Park <https://github.com/swook>, Gal Talmor <https://github.com/galtalmor>, John McLaughlin <https://github.com/zamb3zi>, Brasten Sager <https://github.com/brasten>, Nicolas Penin <https://github.com/npenin>, and Kristian Brünn <https://github.com/kristianmitk>.

// Type definitions for debug 4.1
// Project: https://github.com/visionmedia/debug
// Definitions by: Seon-Wook Park <https://github.com/swook>
//                 Gal Talmor <https://github.com/galtalmor>
//                 John McLaughlin <https://github.com/zamb3zi>
//                 Brasten Sager <https://github.com/brasten>
//                 Nicolas Penin <https://github.com/npenin>
//                 Kristian Brünn <https://github.com/kristianmitk>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

declare var debug: debug.Debug & { debug: debug.Debug; default: debug.Debug };

export = debug;
export as namespace debug;

declare namespace debug {
    interface Debug {
        (namespace: string): Debugger;
        coerce: (val: any) => any;
        disable: () => string;
        enable: (namespaces: string) => void;
        enabled: (namespaces: string) => boolean;
        log: (...args: any[]) => any;

        names: RegExp[];
        skips: RegExp[];

        formatters: Formatters;
    }

    type IDebug = Debug;

    interface Formatters {
        [formatter: string]: (v: any) => string;
    }

    type IDebugger = Debugger;

    interface Debugger {
        (formatter: any, ...args: any[]): void;

        color: string;
        enabled: boolean;
        log: (...args: any[]) => any;
        namespace: string;
        destroy: () => boolean;
        extend: (namespace: string, delimiter?: string) => Debugger;
    }
}
