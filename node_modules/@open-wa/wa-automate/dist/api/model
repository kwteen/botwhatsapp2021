import { Base64 } from "./aliases";
export declare enum QRFormat {
    PNG = "png",
    JPEG = "jpeg",
    WEBM = "webm"
}
export declare enum NotificationLanguage {
    PTBR = "pt-br",
    ENGB = "en-gb",
    DEDE = "de-de",
    IDID = "id-id",
    ITIT = "it-it",
    ES = "es"
}
export declare enum QRQuality {
    ONE = 0.1,
    TWO = 0.2,
    THREE = 0.3,
    FOUR = 0.4,
    FIVE = 0.5,
    SIX = 0.6,
    SEVEN = 0.7,
    EIGHT = 0.8,
    NINE = 0.9,
    TEN = 1
}
export interface SessionData {
    WABrowserId?: string;
    WASecretBundle?: string;
    WAToken1?: string;
    WAToken2?: string;
}
export interface DevTools {
    user: string;
    pass: string;
}
export interface ProxyServerCredentials {
    protocol?: string;
    address: string;
    username: string;
    password: string;
}
export interface ConfigObject {
    sessionData?: SessionData | Base64;
    browserWSEndpoint?: string;
    useStealth?: boolean;
    sessionDataPath?: string;
    bypassCSP?: boolean;
    chromiumArgs?: string[];
    skipBrokenMethodsCheck?: boolean;
    skipUpdateCheck?: boolean;
    sessionId?: string;
    licenseKey?: string | string[];
    customUserAgent?: string;
    devtools?: boolean | DevTools;
    blockCrashLogs?: boolean;
    cacheEnabled?: boolean;
    browserRevision?: string;
    throwErrorOnTosBlock?: boolean;
    headless?: boolean;
    autoRefresh?: boolean;
    qrRefreshS?: number;
    qrTimeout?: number;
    executablePath?: string;
    useChrome?: boolean;
    proxyServerCredentials?: ProxyServerCredentials;
    qrLogSkip?: boolean;
    restartOnCrash?: any;
    disableSpins?: boolean;
    logConsole?: boolean;
    logConsoleErrors?: boolean;
    authTimeout?: number;
    killProcessOnBrowserClose?: boolean;
    safeMode?: boolean;
    skipSessionSave?: boolean;
    popup?: boolean | number;
    inDocker?: boolean;
    qrQuality?: QRQuality;
    qrFormat?: QRFormat;
    hostNotificationLang?: NotificationLanguage;
    blockAssets?: boolean;
    keepUpdated?: boolean;
    viewport?: {
        width?: number;
        height?: number;
    };
    corsFix?: boolean;
    [x: string]: any;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QRQuality = exports.NotificationLanguage = exports.QRFormat = void 0;
var QRFormat;
(function (QRFormat) {
    QRFormat["PNG"] = "png";
    QRFormat["JPEG"] = "jpeg";
    QRFormat["WEBM"] = "webm";
})(QRFormat = exports.QRFormat || (exports.QRFormat = {}));
var NotificationLanguage;
(function (NotificationLanguage) {
    NotificationLanguage["PTBR"] = "pt-br";
    NotificationLanguage["ENGB"] = "en-gb";
    NotificationLanguage["DEDE"] = "de-de";
    NotificationLanguage["IDID"] = "id-id";
    NotificationLanguage["ITIT"] = "it-it";
    NotificationLanguage["ES"] = "es";
})(NotificationLanguage = exports.NotificationLanguage || (exports.NotificationLanguage = {}));
var QRQuality;
(function (QRQuality) {
    QRQuality[QRQuality["ONE"] = 0.1] = "ONE";
    QRQuality[QRQuality["TWO"] = 0.2] = "TWO";
    QRQuality[QRQuality["THREE"] = 0.3] = "THREE";
    QRQuality[QRQuality["FOUR"] = 0.4] = "FOUR";
    QRQuality[QRQuality["FIVE"] = 0.5] = "FIVE";
    QRQuality[QRQuality["SIX"] = 0.6] = "SIX";
    QRQuality[QRQuality["SEVEN"] = 0.7] = "SEVEN";
    QRQuality[QRQuality["EIGHT"] = 0.8] = "EIGHT";
    QRQuality[QRQuality["NINE"] = 0.9] = "NINE";
    QRQuality[QRQuality["TEN"] = 1] = "TEN";
})(QRQuality = exports.QRQuality || (exports.QRQuality = {}));

import { Id } from './id';
export interface Contact {
    formattedName: string;
    id: Id;
    isBusiness: boolean;
    isEnterprise: boolean;
    isHighLevelVerified: any;
    isMe: boolean;
    isMyContact: boolean;
    isPSA: boolean;
    isUser: boolean;
    isVerified: any;
    isWAContact: boolean;
    labels: any[];
    msgs: any;
    name: string;
    plaintextDisabled: boolean;
    profilePicThumbObj: {
        eurl: string;
        id: Id;
        img: string;
        imgFull: string;
        raw: any;
        tag: string;
    };
    pushname: string;
    sectionHeader: any;
    shortName: string;
    statusMute: boolean;
    type: string;
    verifiedLevel: any;
    verifiedName: any;
    isOnline?: any;
    lastSeen?: any;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

import { Id } from './id';
import { GroupChatId } from './aliases';
export interface GroupMetadata {
    id: GroupChatId;
    creation: number;
    owner: {
        server: string;
        user: string;
        _serialized: string;
    };
    participants: any[];
    pendingParticipants: any[];
}
export declare enum groupChangeEvent {
    remove = "remove",
    add = "add"
}
export interface ParticipantChangedEventModel {
    by: Id;
    action: groupChangeEvent;
    who: [Id];
    chat: Id;
}
export declare enum GroupNotificationTypes {
    ADD = "add",
    INVITE = "invite",
    REMOVE = "remove",
    LEAVE = "leave",
    SUBJECT = "subject",
    DESCRIPTION = "description",
    PICTURE = "picture",
    ANNOUNCE = "announce",
    RESTRICT = "restrict"
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupNotificationTypes = exports.groupChangeEvent = void 0;
var groupChangeEvent;
(function (groupChangeEvent) {
    groupChangeEvent["remove"] = "remove";
    groupChangeEvent["add"] = "add";
})(groupChangeEvent = exports.groupChangeEvent || (exports.groupChangeEvent = {}));
var GroupNotificationTypes;
(function (GroupNotificationTypes) {
    GroupNotificationTypes["ADD"] = "add";
    GroupNotificationTypes["INVITE"] = "invite";
    GroupNotificationTypes["REMOVE"] = "remove";
    GroupNotificationTypes["LEAVE"] = "leave";
    GroupNotificationTypes["SUBJECT"] = "subject";
    GroupNotificationTypes["DESCRIPTION"] = "description";
    GroupNotificationTypes["PICTURE"] = "picture";
    GroupNotificationTypes["ANNOUNCE"] = "announce";
    GroupNotificationTypes["RESTRICT"] = "restrict";
})(GroupNotificationTypes = exports.GroupNotificationTypes || (exports.GroupNotificationTypes = {}));
;

export interface Id {
    server: string;
    user: string;
    _serialized: string;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

export { Chat } from './chat';
export { Contact } from './contact';
export { Message } from './message';
export declare enum Status {
    INITIALIZING = 0,
    AUTHENTICATING = 1,
    READY = 3
}
export declare enum Events {
    AUTHENTICATED = "authenticated",
    AUTHENTICATION_FAILURE = "auth_failure",
    READY = "ready",
    MESSAGE_RECEIVED = "message",
    MESSAGE_CREATE = "message_create",
    MESSAGE_REVOKED_EVERYONE = "message_revoke_everyone",
    MESSAGE_REVOKED_ME = "message_revoke_me",
    MESSAGE_ACK = "message_ack",
    GROUP_JOIN = "group_join",
    GROUP_LEAVE = "group_leave",
    GROUP_UPDATE = "group_update",
    QR_RECEIVED = "qr",
    DISCONNECTED = "disconnected",
    STATE_CHANGED = "change_state"
}
export declare enum STATE {
    CONFLICT = "CONFLICT",
    CONNECTED = "CONNECTED",
    DEPRECATED_VERSION = "DEPRECATED_VERSION",
    OPENING = "OPENING",
    PAIRING = "PAIRING",
    PROXYBLOCK = "PROXYBLOCK",
    SMB_TOS_BLOCK = "SMB_TOS_BLOCK",
    TIMEOUT = "TIMEOUT",
    TOS_BLOCK = "TOS_BLOCK",
    UNLAUNCHED = "UNLAUNCHED",
    UNPAIRED = "UNPAIRED",
    UNPAIRED_IDLE = "UNPAIRED_IDLE",
    SYNCING = "SYNCING",
    DISCONNECTED = "DISCONNECTED"
}
export * from './config';

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.STATE = exports.Events = exports.Status = void 0;
var Status;
(function (Status) {
    Status[Status["INITIALIZING"] = 0] = "INITIALIZING";
    Status[Status["AUTHENTICATING"] = 1] = "AUTHENTICATING";
    Status[Status["READY"] = 3] = "READY";
})(Status = exports.Status || (exports.Status = {}));
;
var Events;
(function (Events) {
    Events["AUTHENTICATED"] = "authenticated";
    Events["AUTHENTICATION_FAILURE"] = "auth_failure";
    Events["READY"] = "ready";
    Events["MESSAGE_RECEIVED"] = "message";
    Events["MESSAGE_CREATE"] = "message_create";
    Events["MESSAGE_REVOKED_EVERYONE"] = "message_revoke_everyone";
    Events["MESSAGE_REVOKED_ME"] = "message_revoke_me";
    Events["MESSAGE_ACK"] = "message_ack";
    Events["GROUP_JOIN"] = "group_join";
    Events["GROUP_LEAVE"] = "group_leave";
    Events["GROUP_UPDATE"] = "group_update";
    Events["QR_RECEIVED"] = "qr";
    Events["DISCONNECTED"] = "disconnected";
    Events["STATE_CHANGED"] = "change_state";
})(Events = exports.Events || (exports.Events = {}));
;
var STATE;
(function (STATE) {
    STATE["CONFLICT"] = "CONFLICT";
    STATE["CONNECTED"] = "CONNECTED";
    STATE["DEPRECATED_VERSION"] = "DEPRECATED_VERSION";
    STATE["OPENING"] = "OPENING";
    STATE["PAIRING"] = "PAIRING";
    STATE["PROXYBLOCK"] = "PROXYBLOCK";
    STATE["SMB_TOS_BLOCK"] = "SMB_TOS_BLOCK";
    STATE["TIMEOUT"] = "TIMEOUT";
    STATE["TOS_BLOCK"] = "TOS_BLOCK";
    STATE["UNLAUNCHED"] = "UNLAUNCHED";
    STATE["UNPAIRED"] = "UNPAIRED";
    STATE["UNPAIRED_IDLE"] = "UNPAIRED_IDLE";
    STATE["SYNCING"] = "SYNCING";
    STATE["DISCONNECTED"] = "DISCONNECTED";
})(STATE = exports.STATE || (exports.STATE = {}));
;
__exportStar(require("./config"), exports);

import { ChatId } from "./aliases";
export interface Message {
    id: string;
    body: string;
    type: MessageTypes;
    mimetype?: string;
    lat?: string;
    lng?: string;
    loc?: string;
    t: number;
    notifyName: string;
    from: ChatId;
    to: ChatId;
    self: boolean;
    duration?: string | number;
    ack: MessageAck;
    invis: boolean;
    isNewMsg: boolean;
    star: boolean;
    recvFresh: boolean;
    broadcast: boolean;
    isForwarded: boolean;
    labels: any[];
    mentionedJidList: string[];
    caption: string;
    sender: {
        id: string;
        name: string;
        shortName: string;
        pushname: string;
        type: string;
        plaintextDisabled: boolean;
        isBusiness: boolean;
        isEnterprise: boolean;
        statusMute: boolean;
        labels: any[];
        formattedName: string;
        isMe: boolean;
        isMyContact: boolean;
        isPSA: boolean;
        isUser: boolean;
        isWAContact: boolean;
        profilePicThumbObj: {
            eurl: string;
            id: string;
            img: string;
            imgFull: string;
            raw: any;
            tag: string;
        };
        msgs: any;
    };
    timestamp: number;
    content: string;
    isGroupMsg: boolean;
    isMMS: boolean;
    isMedia: boolean;
    isNotification: boolean;
    isPSA: boolean;
    fromMe: boolean;
    chat: {
        id: string;
        pendingMsgs: boolean;
        lastReceivedKey: {
            fromMe: boolean;
            remote: string;
            id: string;
            _serialized: string;
        };
        t: number;
        unreadCount: number;
        archive: boolean;
        isReadOnly: boolean;
        modifyTag: number;
        muteExpiration: number;
        name: string;
        notSpam: boolean;
        pin: number;
        msgs: any;
        kind: string;
        isGroup: boolean;
        contact: {
            id: string;
            name: string;
            shortName: string;
            pushname: string;
            type: string;
            plaintextDisabled: boolean;
            isBusiness: boolean;
            isEnterprise: boolean;
            statusMute: boolean;
            labels: any[];
            formattedName: string;
            isMe: boolean;
            isMyContact: boolean;
            isPSA: boolean;
            isUser: boolean;
            isWAContact: boolean;
            profilePicThumbObj: any[];
            msgs: any;
        };
        groupMetadata: any;
        presence: {
            id: string;
            chatstates: any[];
        };
    };
    chatId: string;
    author: string;
    clientUrl: string;
    quotedMsg: any;
    quotedMsgObj: any;
    mediaData: {};
    shareDuration: number;
}
export declare enum MessageTypes {
    TEXT = "chat",
    AUDIO = "audio",
    VOICE = "ptt",
    IMAGE = "image",
    VIDEO = "video",
    DOCUMENT = "document",
    STICKER = "sticker",
    LOCATION = "location",
    CONTACT_CARD = "vcard",
    CONTACT_CARD_MULTI = "multi_vcard",
    REVOKED = "revoked",
    UNKNOWN = "unknown"
}
export declare enum MessageAck {
    ACK_ERROR = -1,
    ACK_PENDING = 0,
    ACK_SERVER = 1,
    ACK_DEVICE = 2,
    ACK_READ = 3,
    ACK_PLAYED = 4
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageAck = exports.MessageTypes = void 0;
var MessageTypes;
(function (MessageTypes) {
    MessageTypes["TEXT"] = "chat";
    MessageTypes["AUDIO"] = "audio";
    MessageTypes["VOICE"] = "ptt";
    MessageTypes["IMAGE"] = "image";
    MessageTypes["VIDEO"] = "video";
    MessageTypes["DOCUMENT"] = "document";
    MessageTypes["STICKER"] = "sticker";
    MessageTypes["LOCATION"] = "location";
    MessageTypes["CONTACT_CARD"] = "vcard";
    MessageTypes["CONTACT_CARD_MULTI"] = "multi_vcard";
    MessageTypes["REVOKED"] = "revoked";
    MessageTypes["UNKNOWN"] = "unknown";
})(MessageTypes = exports.MessageTypes || (exports.MessageTypes = {}));
;
var MessageAck;
(function (MessageAck) {
    MessageAck[MessageAck["ACK_ERROR"] = -1] = "ACK_ERROR";
    MessageAck[MessageAck["ACK_PENDING"] = 0] = "ACK_PENDING";
    MessageAck[MessageAck["ACK_SERVER"] = 1] = "ACK_SERVER";
    MessageAck[MessageAck["ACK_DEVICE"] = 2] = "ACK_DEVICE";
    MessageAck[MessageAck["ACK_READ"] = 3] = "ACK_READ";
    MessageAck[MessageAck["ACK_PLAYED"] = 4] = "ACK_PLAYED";
})(MessageAck = exports.MessageAck || (exports.MessageAck = {}));
;

export interface CustomProduct {
    name: string;
    description: string;
    priceAmount1000: number;
    currency: string;
    url?: string;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

export interface SessionInfo {
    WA_VERSION: string;
    PAGE_UA: string;
    WA_AUTOMATE_VERSION: string;
    BROWSER_VERSION: string;
    LAUNCH_TIME_MS?: number;
    NUM?: string;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

export declare type ChatId = string;
export declare type GroupChatId = string;
export declare type ContactId = string;
export declare type MessageId = string;
export declare type Content = string;
export declare type DataURL = string;
export declare type Base64 = string;
export declare type FilePath = string;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

import { Id } from "./id";
import { ContactId } from "./aliases";
export interface Call {
    id: string;
    peerJid: Id;
    offerTime: number;
    isVideo: boolean;
    isGroup: boolean;
    canHandleLocally: boolean;
    outgoing: boolean;
    webClientShouldHandle: boolean;
    participants: [ContactId];
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

import { Contact } from './contact';
import { GroupMetadata } from './group-metadata';
import { Id } from './id';
export interface Chat {
    archive: boolean;
    changeNumberNewJid: any;
    changeNumberOldJid: any;
    contact: Contact;
    groupMetadata: GroupMetadata;
    id: Id;
    isAnnounceGrpRestrict: any;
    formattedTitle?: string;
    isGroup: boolean;
    isReadOnly: boolean;
    kind: string;
    labels: any;
    lastReceivedKey: any;
    modifyTag: number;
    msgs: any;
    muteExpiration: number;
    name: string;
    notSpam: boolean;
    pendingMsgs: boolean;
    pin: number;
    presence: any;
    t: number;
    unreadCount: number;
    ack?: any;
    isOnline?: any;
    lastSeen?: any;
}
export interface LiveLocationChangedEvent {
    id: string;
    lat: number;
    lng: number;
    speed: number;
    lastUpdated: number;
    accuracy: number;
    degrees: any;
    msgId?: string;
}
export declare enum ChatState {
    TYPING = 0,
    RECORDING = 1,
    PAUSED = 2
}
export declare enum ChatTypes {
    SOLO = "solo",
    GROUP = "group",
    UNKNOWN = "unknown"
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatTypes = exports.ChatState = void 0;
var ChatState;
(function (ChatState) {
    ChatState[ChatState["TYPING"] = 0] = "TYPING";
    ChatState[ChatState["RECORDING"] = 1] = "RECORDING";
    ChatState[ChatState["PAUSED"] = 2] = "PAUSED";
})(ChatState = exports.ChatState || (exports.ChatState = {}));
var ChatTypes;
(function (ChatTypes) {
    ChatTypes["SOLO"] = "solo";
    ChatTypes["GROUP"] = "group";
    ChatTypes["UNKNOWN"] = "unknown";
})(ChatTypes = exports.ChatTypes || (exports.ChatTypes = {}));
;
