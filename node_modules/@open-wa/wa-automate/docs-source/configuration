# GetStickerDecryptable


# Launch Events

When you call `create` there is actually a lot happening in the background and in some use cases, it may be useful to listen to those events. In order to do this you have to use the built in event emitter [[ev]]:

```javascript
import { ev } from '@open-wa/wa-automate';

ev.on('event', callback)
```

The event you want to listen to is in the format of [namespace].[sessionId]

The event can include wildcards.

For example, to listen to all qr code events, the event will be `qr.**`. e.g:

```javascript
ev.on('qr.**',...
```

Listen to all sessionData events

```javascript
ev.on('sessionData.**',...
```

Listen to all events from session1

```javascript
ev.on('**.session1',...
```

Listen to all events

```javascript
ev.on('**.**',...
```

ev always emits data, sessionId and the namespace which is helpful to know if there are multiple sessions or you're listening to events from all namespaces.

```javascript
ev.on('**.**', (data, sessionId, namespace) => {

 console.log(`${namespace} event detected for session ${sessionId}`, data)

});
```

# Licensed Features

## Features

### Insiders Features

open-wa is at the forefront of open source WA developmentand runs on donations from backers. To encourage donations, backers have access to exclusive features with an [Insiders Program license key](https://gumroad.com/l/BTMt).


| Function                          | Description |
| --------------------------------- | ----------- |
| [[setGroupToAdminsOnly]]                  | Changes group setting so only admins can send messages            |
| [[setGroupEditToAdminsOnly]]                   | Changes group setting so only admins can edit group info            |
| [[setGroupTitle]]                   | Changes the group title           |
| [[setGroupDescription]]                   | Changes the group description         |
| [[setProfilePic]]                   | Change the host phones profile picture           |
| [[onRemovedFromGroup]]                   | Detect when host phone is removed from a group           |
| [[onContactAdded]]                   | Detect when host phone adds a new contact           |
| [[getCommonGroups]]                   | Retreive all common groups between the host device and a conttact           |
| [[clearAllChats]]                   | Easily clear memory by clearing all chats of all messages on the host device and WA Web           |
| [[sendReplyWithMentions]]                   | Send a reply to a message with mentions           |
| [[onChatOpened]]                   | Detect when a chat is selected in the UI           |
| [[onChatState]]                   | Detect when someone is typing or recording a voicenote           |
| [[getStickerDecryptable]]                   | Convert a normal sticker message (results in blank image) to one that is able to grab and decrypt the actual sticker           |
| [[forceStaleMediaUpdate]]                   | If a media message is old, the file url will result in a `404` error. forceStaleMediaUpdate forces the mobile app to reupload the file.           |
| [[tagEveryone]]                   | Send a group message with everyone tagged.           |

### Sending messages to non-contact numbers

The ability to send messages to non-contact numbers is restricted in this library to prevent spam.

There are 3 ways to start a chat with a new number:

1. [WA Links](https://faq.whatsapp.com/en/26000030/)
  
      You can send a special link to the person you want to start a chat with. This will open a conversation with your number on their phone. This way you can insure that they have explicitly started a conversation with you.
2. [WA Buttons](https://github.com/smashah/whatsapp-button?ref=open-wa-nodejs)

      You can add this button to your website which, when clicked, will open a chat with you in the same way as above.
3. [With a Restricted License Key](#how-to-get-a-license-key)

     In order to unlock the functionality to send texts to unknown numbers through @open-wa/wa-automate itself, you will need a [Restricted License key](https://gumroad.com/l/BTMt?tier=1%20Restricted%20License%20Key).

     One License Key is valid for one number. Each License Key for this is Â£10 per month. [Instructions below.](#how-to-get-a-license-key)

### Story Keys

After a lot of effort, ability to send text, image and video stories is available exclusively in this library.

## How to get a License Key

1. Go to [Gumroad](https://gum.co/BTMt?tier=1%20Restricted%20License%20Key).
2. Click on the type of license you require.
3. In the checkout, ***enter the host account number you want to assign to the License Key (the one you will be using with open-wa, not your personal number)*** , along with the use case for this functionality and your github username. Please note, with this new system you'll only be able to change the number once.
4. Complete the checkout process.
5. You will instantly receive your License key on the screen and in your email.

   <div align="center">
   <img src="https://raw.githubusercontent.com/open-wa/wa-automate-nodejs/master/resources/membership.png"/>
   </div>

6. Add licenseKey to your config:

```javascript
...
create({
  licenseKey: "..."
})

//or for multiple license keys to stack features.

create({
  licenseKey: ["...","..."]
})
...
```

## Keys

| Name | link | Description
| --------------------------------- | ----------- |  ----------- |
| Insiders | [LINK](https://gum.co/BTMt?tier=Insiders%20Program) | [All Insiders Features](https://open-wa.github.io/wa-automate-nodejs/pages/The%20Client/licensed-features.html#insiders-features)
| Restricted | [LINK](https://gumroad.com/l/BTMt?tier=1%20Restricted%20License%20Key) | Send messages to non-contacts
| Text Story | [LINK](https://gum.co/BTMt?tier=1%20Text%20Story%20License%20Key) | Send Text Stories
| Image Story | [LINK](https://gum.co/BTMt?tier=1%20Image%20Story%20License%20Key) | Send Image Stories
| Video Story | [LINK](https://gum.co/BTMt?tier=1%20Video%20Story%20License%20Key) | Send Video Stories
| Premium | [LINK](https://gum.co/BTMt?tier=1%20Premium%20License%20Key) | All the above + [Send Custom Products](https://open-wa.github.io/wa-automate-nodejs/classes/client.html#sendcustomproduct)

All keys include access to all insider's features. You do not need a Premium Key to send messages to non-contacts.

## Troubleshooting

If the license key is showing up as invalid, there may be an issue with your host account number you entered in the checkout form. In some countries, the host account number is different from the actual number (for example in Brazil, an extra 9 is added). If you're unsure about your host account number then use the following code:

```javascript
const hostAccountNumber = await client.getHostNumber();
console.log('Host account', hostAccountNumber);
```

If it's different from what you've entered in the checkout form, [please fill and send this email.](mailto:shah@idk.uno?subject=OPENWA%3A%20WRONG%20HOST%20ACC%20NUMBER&body=email%20used%20to%20buy%20key%3A%0D%0Alicense%20key%3A%0D%0Acorrect%20host%20account%20number%3A%0D%0A)

If you are having issues where your license key shows as valid in the console, but the features continually return `false` this may be due to a NodeJS issue relating to the time on your machine. To fix this, make sure your machine's time is correct.

## Switching your host account

If your development and production host accounts are different, then you can enter the development host account number in the form and when you're ready to your production host account, [fill and send this email.](mailto:shah@idk.uno?subject=OPENWA%3A%PRODUCTION%20HOST%20ACC%20NUMBER&body=email%20used%20to%20buy%20key%3A%0D%0Alicense%20key%3A%0D%0Acorrect%20host%20account%20number%3A%0D%0A)

## Notes

- One license key is valid for one host account number.
- You can change the number assigned to a specific License Key once.
- In order to cancel your License Key, simply stop your membership.
- You can use multiple license keys for each host number.
- Apart from adding your licenseKey to your config, you will need to change nothing else in your code.
- An added benefit for members is priority on issues.
- License Key requests may be rejected.
- All code you will receive from the license server is closed-sourced and is under the same license as this project. You will not be able to read it. It is not transferrable to another number or another project.
- All keys provide access to Insiders Features.
- No Refunds unless you have chosen the incorrect license upon checkout. Refund requests need to take place after the correct license is purchased. [Once the correct license is purchased please email me for a refund.](mailto:shah@idk.uno?subject=OPENWA%3A%LICENSE%3A%CORRECTION)
- [Volume licenses are available upon request.](mailto:shah@idk.uno?subject=OPENWA%3A%VOLUME%%20LICENSE)
- [Referral links are available upon request.](mailto:shah@idk.uno?subject=OPENWA%3A%Referral%%20Scheme)
# Multiple Sessions

You can run multiple sessions of @open-wa/wa-automate in the same process. This allows you to do interesting things for example:

1. Design and run automated tests for you WA bot.
2. Connect two or more WA numbers to a single (or multiple) message handler(s)
3. Use one client to make sure another one is alive by pinging it.

Please see demo/index.ts for a working example

NOTE: DO NOT CREATE TWO SESSIONS WITH THE SAME SESSIONID. DO NOT ALLOW SPACES AS SESSION ID.

```javascript
import { create, Client, ev} from '@open-wa/wa-automate';

function start(client: Client) {
  ...
}

create({
  sessionId:'session'
}).then(client => start(client));

create({
  sessionId:'another_session'
}).then(client => start(client));
```

You can then capture the QR Code for each session using the following event listener code:

```javascript
//events are fired with the ev namespace then the session Id. e.g "qr.another_session"
//You can however use the wildcard operator with the new event listener and capture the session Id as a parameter instead.
ev.on('qr.**', async (qrcode,sessionId) => {
  //base64 encoded qr code image
  const imageBuffer = Buffer.from(qrcode.replace('data:image/png;base64,',''), 'base64');
  fs.writeFileSync(`qr_code${sessionId?'_'+sessionId:''}.png`, imageBuffer);
});
```

## Orchestrating multiple sessions

Client sessions are living breathing objects. They CANNOT be stringified and parsed for later use. If you want to 'hold' multiple sessions in one process, make sure to keep them in memory in a session object registry or array.

For example, let's say you have a `marketing` and `sales` sessions.


```
...

const clientSessionRegistry = {};

async start(client){
  //save for later
  clientSessionRegistry[client.getSessionId()] = client;

  client.onMessage...
}

//maybe this is called from an API
sendText(sessionId, params){
  //grab the existing client from the 'registry'
  const client = clientSessionRegistry[sessionId];

  //use the client
  client.sendText(...params);
}

create().then(client => start);
```

# The Client

Who/what is the client? The Client is the orchestrator of a WA Web session. You can have multiple clients in one node (or ts-node) process. But it's generally best practice to keep a single client on a single process.

## How to create a client

After you've installed the library in your project, you can then use [[create]] to ***create*** a new session. This simple example starts a bot that replies with `ð Hello!` when it receives a `Hi`

```javascript
const { create, Client } = require('@open-wa/wa-automate');

// or
// import { create, Client } from '@open-wa/wa-automate';


function start(client) {
  client.onMessage(async message => {
    if (message.body === 'Hi') {
      await client.sendText(message.from, 'ð Hello!');
    }
  });
}

create().then(start);

```

The method `create` is what creates, authenticates/reloads a session. When you call create, make sure to keep an eye on the console output. In the console it will log the loading state of the client and the QR code (if there is no valid session data).

You can call `create()` on it's own, however there are a bunch of powerful configuration variables you can set to acheive a more custom set up.

[[ConfigObject]]

Please note that you will be unable to scan the QR code if it is on a dark background.

## What happens when the session starts

In order to eliminate potential phishing attacks using this library, a message is sent to the host account from itself notifying the account user that the account is being managed/controlled using an automation software.

This host notification will result in a CORS error in the browser instance. You can ignore the error.

Learn more here: https://github.com/open-wa/wa-automate-nodejs/issues/709#issuecomment-673419088

# Capturing QR Code

An event is emitted every time the QR code is received by the system. You can grab hold of this event emitter by importing `ev`. You can capture this qr code and save it to a file.

```javascript
import { ev } from '@open-wa/wa-automate';
const fs = require('fs');

ev.on('qr.**', async qrcode => {
  //qrcode is base64 encoded qr code image
  //now you can do whatever you want with it
  const imageBuffer = Buffer.from(
    qrcode.replace('data:image/png;base64,', ''),
    'base64'
  );
  fs.writeFileSync('qr_code.png', imageBuffer);
});
```

# Capturing the session data

By default, the session data is saved as a `[sessionId].data.json` file in the process working directory, however, you can disable this ([[skipSessionSave]]) and implement a custom handler for session data. It is important that you always update session data with the latest values. The default behaviour is to override the data.json file with the latest session data.

```javascript
import { ev } from '@open-wa/wa-automate';
const fs = require('fs');

ev.on('sessionData.**', async (sessionData, sessionId) => {
    //do something with sessionData and sessionId
});
```

# Configration

There are quite a few ways you can customize your session.

Find out about all possible options here: [[ConfigObject]]

Set the desired config options as parameter on `create`.

In the following example:

1. The process tries to find and run a chrome installation instead of using the default chromium (chrome is required to send videos & GIFS) [[useChrome]]
2. Automatically refreshes the QR code at regular intervals [[ConfigObject.autoRefresh]]
3. Disables the cache (may be useful to optimize memory consumption) [[cacheEnabled]]
4. Sets the session Id to 'hr' (this will result in a file called hr.data.json being saved to the process working directory) [[ConfigObject.sessionId]]

```javascript
const { create, Client } = require('@open-wa/wa-automate');
// or
// import { create, Client } from '@open-wa/wa-automate';

const launchConfig = {
    useChrome: true,
    autoRefresh:true,
    cacheEnabled:false,
    sessionId: 'hr'
};


function start(client) {
  client.onMessage(async message => {
    if (message.body === 'Hi') {
      await client.sendText(message.from, 'ð Hello!');
    }
  });
}

create(launchConfig).then(start);

```

## Timing out an unpaired session

If you want to kill the process after a certain amount of seconds due to an unscanned code, you can now set the qrTimeout parameter in the configuration object. You can also use authTimeout if you want to wait only a certain period of time to wait for the session to connect to the phone.

```javascript
create({
  qrTimeout: 30, //kills the session if the QR code is not scanned within 30 seconds.
  authTimeout: 30 //kills the session if the session hasn't authentication 30 seconds (e.g If the session has the right credentials but the phone is off).
})
.then(client => start(client));
```

## Refreshing QRCode

In version v1.6.13^, you can now refresh the QR code every 10 seconds (you can change the interval).

```javascript
create({
    autoRefresh:false, //default to true
    qrRefreshS:30 //please note that if this is too long then your qr code scan may end up being invalid. Generally qr codes expire every 15 seconds.
}).then(async client => await start(client));
```

## Open with browser

The actual browser window you use is called a `head`, by default the library runs a chrome session ***headless*** (i.e in the background - you don't see it). If you want the browser to open up to see what's going on you can set `headless` to `false`.

```javascript
create({
  headless: false
}).then(async client => await start(client));
```
