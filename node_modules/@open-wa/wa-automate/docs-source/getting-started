# Docker

There are a few ways to use this library in docker.

1. Using the default quick run API dockerized
2. Runing your custom app built on top of this library dockerized.

Either way, we must remember the whole point of containerization is for each unit/process to have a single purpose. For this reason, the browser process & wa-automate process are seperate.

Both methods are explained in the [`@open-wa/wa-automate-docker`](https://github.com/open-wa/wa-automate-docker) repository.
# Installation

## Standard Installation

Run the following command to ensure you have wa-automate installed:

```bash
> npm install @open-wa/wa-automate
```

or using yarn:

```bash
> yarn add @open-wa/wa-automate
```

You can then add the library to your project:

```javascript
import { create, Client, decryptMedia, ev } from '@open-wa/wa-automate';

```

## CentOS Installation

Some people report CentOS causing problems when installing this library.

Try the following:

```bash
> npm install @open-wa/wa-automate --unsafe-perm
```

or if you come accros permission issues:

```bash
> sudo npm install @open-wa/wa-automate --unsafe-perm
```

## Installation when primarily using Chrome

If you use chrome, by setting [[`ConfigObject.useChrome`]] or [[`ConfigObject.executablePath`]] then you don't need to install the whole of puppeteer (puppeteer installs a version of Chromium - not Chrome - by default).

If there are issues with installing the packages then try this:

```bash
> npm install @open-wa/wa-automate --ignore-scripts
```

Doing this saves time and memory.
# Zero Install Quick API

Ever wanted to create an API out of your WA number? You're in luck! 

Open the terminal, and enter this:

```bash
> npx @open-wa/wa-automate
```

> P.S you have to make sure you have `node`, `npm`, and `npx` installed on your system.

When you run the code, it will also give you a URL to an API explorer where you can play around with the various API endpoints with documentation.

You can see all the help text like so:

```bash
> npx @open-wa/wa-automate --help
```

You can set a custom port:

```bash
> npx @open-wa/wa-automate -p 8080
```

and an api key which will prevent unauthorized requrests. This will result in a key being automatically generated for you:

```bash
> npx @open-wa/wa-automate -p 8080 -k
```

or you can set your own, I got the following secure key from [https://randomkeygen.com/](https://randomkeygen.com/):

```bash
> npx @open-wa/wa-automate -p 8080 -k 'K6MEQJRV3trXMPZ5eQd1Jl8NaaaRZxqy'
```

You can easily force the program to maintain focus (`--keep-alive` or `-a`):

```bash
> npx @open-wa/wa-automate -p 8080 -k 'K6MEQJRV3trXMPZ5eQd1Jl8NaaaRZxqy' --keep-alive

//or

> npx @open-wa/wa-automate -p 8080 -k 'K6MEQJRV3trXMPZ5eQd1Jl8NaaaRZxqy' --keep-alive
```

## Restarting session

As of version 2.0.0 of this library, you can now provide session data as a base64 string. This is the default method goin forward and your `.data.json` files should have this string if you've run the program in version 2.0.0+.

There are 3 param tags that can be used to set session data `-s`, `--session` or `--session-data` - all work but make sure you wrap the string with double quotes `"` and NOT sinle quotes `'`.

```bash
> npx @open-wa/wa-automate -p 8080 -k 'K6MEQJRV3trXMPZ5eQd1Jl8NaaaRZxqy' --session-data "eyJXQUJyb...ifQ=="
//or
> npx @open-wa/wa-automate -p 8080 -k 'K6MEQJRV3trXMPZ5eQd1Jl8NaaaRZxqy' --session "eyJXQUJyb...ifQ=="
//or
> npx @open-wa/wa-automate -p 8080 -k 'K6MEQJRV3trXMPZ5eQd1Jl8NaaaRZxqy' -s "eyJXQUJyb...ifQ=="
```

## Running on a server

If you're not running this on your localhost, you'll need to set the server hostname for the api-docs to work correctly.

```bash
> npx @open-wa/wa-automate -p 8080 --api-host 'https://my-wa-api.dev:8080'
```

## Webhooks

You can also set a webhook address to send all requests to. I like using [webhook.site](https://webhook.site/) to check and test events.

```bash
> npx @open-wa/wa-automate -w 'https://webhook.site/7a00ac21-60f2-411e-a571-515b37b2025a'
```

Now if you go to:

```http
https://webhook.site/#!/7a00ac21-60f2-411e-a571-515b37b2025a
```

 you'll be able to see all the events come through.

If you do use this link please make sure to clear all of your requests for your privacy.

## API Docs

By default, the CLI generates and serves a swagger api explorer at `[host]/api-docs/`

For example:

```bash
> npx @open-wa/wa-automate -w 'https://webhook.site/7a00ac21-60f2-411e-a571-515b37b2025a' -p 8008
```

will server the api docs at

```http
http://localhost:8008/api-docs/
```

## Postman collection

The CLI will also automatically generate a postman collection for your specific set up (including api keys, hostname, ports, etc.) which you can then easily import into postman.

## Coming soon

Soon SDKs for most programming lanugages will be created using the CLI as a base 'server'. Check this issue for updates: [#894](https://github.com/open-wa/wa-automate-nodejs/issues/894)

# ConfigObject.useChrome

